/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.plantillapantallasproyecto2basedatosavanzadas;

import botonesTabla.botonRenderizador;
import botonesTabla.seleccionadorBoton;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.itson.DAO.TramitesDAO;
import org.itson.dominio.Licencia;
import org.itson.dominio.Persona;
import org.itson.dominio.Placa;
import org.itson.dominio.Tramite;
import utilidades.TipoTramite;
import static utilidades.TipoTramite.Licencias;
import static utilidades.TipoTramite.Placas;
import utilidades.Ventana;

/**
 *
 * @author Julio Chon, Luis Ayon
 */
public class HistorialTramitesMostrar extends javax.swing.JFrame {

    private Persona persona;
    private List<Placa> listaPlacas;
    private List<Licencia> listaLicencias;

    /**
     * Metodo constructor que inicializa los atributos de la clase
     *
     * @param persona persona a la cual se le buscaran sus tramites
     */
    public HistorialTramitesMostrar(Persona persona) {
        initComponents();
        this.setVisible(true);
        this.persona = persona;
        this.listaPlacas = new ArrayList<>();
        this.listaLicencias = new ArrayList<>();
        String informacion = persona.getRfc() + " " + persona.getNombre() + " "
                + persona.getApellidoPaterno() + " " + persona.getApellidoMaterno();
        this.jLbPersona.setText(informacion);
        this.llenarTabla();
    }

    /**
     * Llena la tabla del historial de trámites con la información de las
     * licencias y placas realizadas por la persona. Obtiene la lista de
     * licencias y placas realizadas por la persona a través del objeto
     * TramitesDAO. Luego, crea una lista de Tramites que contiene tanto las
     * licencias como las placas. A partir de esta lista, crea las filas que se
     * agregan a la tabla del historial de trámites y las añade al modelo de la
     * tabla. Además, agrega un renderizador y un editor de botón a la columna
     * "Seleccionar" y asigna un MouseListener a la tabla para detectar cuando
     * se hace clic en el botón "Seleccionar".
     */
    public void llenarTabla() {
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy");
        TramitesDAO tramitesDAO = new TramitesDAO();
        listaLicencias = tramitesDAO.buscarLicencias(persona);
        listaPlacas = tramitesDAO.buscarPlacas(persona);
        List<Tramite> listaTramites = new ArrayList<>();
        listaTramites.addAll(listaLicencias);
        listaTramites.addAll(listaPlacas);
        DefaultTableModel modeloLicencias = (DefaultTableModel) this.tlbHistorial.getModel();
        modeloLicencias.setRowCount(0);
        for (Tramite licencia : listaTramites) {
            Object[] fila = {
                licencia.getId(),
                licencia.getEstado(),
                formateador.format(licencia.getFechaExpedicion().getTime()),
                formateador.format(licencia.getVigencia().getTime()),
                licencia.getTipoTramite(),
                "Seleccionar"
            };
            modeloLicencias.addRow(fila);
        }
        tlbHistorial.getColumnModel().getColumn(5).setCellRenderer(new botonRenderizador());
        tlbHistorial.getColumnModel().getColumn(5).setCellEditor(new seleccionadorBoton());
        tlbHistorial.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int columna = tlbHistorial.getColumnModel().getColumnIndexAtX(e.getX());
                int fila = e.getY() / tlbHistorial.getRowHeight();
                if (columna == 5 && fila < tlbHistorial.getRowCount() && fila >= 0) {

                    botonActionPerformed(fila);

                }
            }
        });

    }

    /**
     * Metodo que lanza un mensaje con la informacion del tramite de placa
     * seleccionado
     *
     * @param placa placa la cual se desea saber toda su informacion
     */
    public void mostrarMensajeInformacionPlaca(Placa placa) {
        JOptionPane.showMessageDialog(this, placa);
    }

    /**
     * Metodo que lanza un mensaje con la informacion del tramite de licencia
     * seleccionado
     *
     * @param licencia licencia la cual se desea saber toda su informacion
     */
    public void mostrarMensajeInformacionLicencia(Licencia licencia) {

        JOptionPane.showMessageDialog(this, licencia);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgTipoTramite = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLbPersona = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnInicio = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tlbHistorial = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(564, 564));

        jPanel3.setBackground(new java.awt.Color(0, 51, 0));

        jLbPersona.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLbPersona.setForeground(new java.awt.Color(255, 255, 255));
        jLbPersona.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Historial de Tramites");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLbPersona, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLbPersona)
                .addContainerGap(111, Short.MAX_VALUE))
        );

        btnInicio.setBackground(new java.awt.Color(153, 0, 51));
        btnInicio.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnInicio.setForeground(new java.awt.Color(255, 255, 255));
        btnInicio.setText("Inicio");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(153, 0, 51));
        btnCancelar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        tlbHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Estado", "Fecha Expedicion", "Vigencia", "Tipo Tramite", "Mas informacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tlbHistorial);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * Busca la placa con el id especificado en la lista de placas y muestra un
     * mensaje de información.
     *
     * @param id el id de la placa a buscar.
     */
    public void buscarPlaca(int id) {
        for (Placa placas : listaPlacas) {
            if (placas.getId() == id) {
                this.mostrarMensajeInformacionPlaca(placas);
            }
        }
    }

    /**
     *
     * Busca la licencia con el id especificado en la lista de licencias y
     * muestra un mensaje de información.
     *
     * @param id el id de la licencia a buscar.
     */
    public void buscarLicencia(int id) {
        for (Licencia licencias : listaLicencias) {
            if (licencias.getId() == id) {
                this.mostrarMensajeInformacionLicencia(licencias);
            }
        }
    }

    /**
     *
     * Maneja el evento de hacer clic en un botón de la tabla de historial de
     * tramites.
     *
     * Obtiene el id del tramite seleccionado y determina si se trata de una
     * placa o una licencia.
     *
     * Si es una placa, llama al método buscarPlaca() con el id; si es una
     * licencia, llama al método buscarLicencia() con el id.
     *
     * @param fila la fila de la tabla en la que se hizo clic.
     */
    private void botonActionPerformed(int fila) {
        int filaSeleccionada = tlbHistorial.getSelectedRow();
        List<Object> valoresFila = new ArrayList<>();
        for (int i = 0; i < tlbHistorial.getColumnCount(); i++) {
            Object valor = tlbHistorial.getValueAt(filaSeleccionada, i);
            valoresFila.add(valor);
        }
        int id = Integer.parseInt(valoresFila.get(0).toString());

        if (TipoTramite.valueOf(valoresFila.get(4).toString()) == TipoTramite.Placas) {

            this.buscarPlaca(id);
        } else {
            this.buscarLicencia(id);
        }
    }


    /**
     * Metodo que se activa cuando el usuario da click en el boton inicio, lo que 
     * provoca volver a la pantalla de inicio
     * @param evt evento que lanza la accion
     */
    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        this.dispose();
        new MenuInicio();
    }//GEN-LAST:event_btnInicioActionPerformed

    /**
     * Metodo que se activa cuando el usuario da click en el cancelar, regresnado 
     * a la venta de busque de personas
     * @param evt evento que lanza la accion
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
        BusquedaPersona busquedaPersona = new BusquedaPersona(Ventana.HISTORIALTRAMITES);
    }//GEN-LAST:event_btnCancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgTipoTramite;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLbPersona;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tlbHistorial;
    // End of variables declaration//GEN-END:variables
}
